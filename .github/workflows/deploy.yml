name: Deploy API Permissions Site

on:
  schedule:
    # Run daily at midnight UTC
    - cron: '0 0 * * *'
  
  # Run on pushes to main branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Install dependencies
        run: |
          npm install
          npm ci || npm install
      
      - name: Create data directory
        run: mkdir -p apipermissions-site/data
      
      - name: Fetch latest permissions data
        run: |
          # Define file mappings with correct URLs
          declare -A file_paths=(
            ["permissions-descriptions.json"]="dev/permissions/permissions-descriptions.json"
            ["provisioning-info.json"]="dev/permissions/new/ProvisioningInfo.json"
            ["permissions-beta.json"]="dev/permissions/permissions-beta.json"
            ["permissions.json"]="dev/permissions/new/permissions.json"
          )
          
          # Base GitHub raw content URL
          BASE_URL="https://raw.githubusercontent.com/microsoftgraph/microsoft-graph-devx-content"
          
          # Function to download with retries
          download_with_retry() {
            local url="$1"
            local output_file="$2"
            local max_retries=3
            local retry_count=0
            local wait_time=5
            
            while [ $retry_count -lt $max_retries ]; do
              echo "Attempt $(($retry_count + 1)) of $max_retries..."
              echo "Downloading from: $url"
              
              # Add delay between requests
              if [ $retry_count -gt 0 ]; then
                echo "Waiting ${wait_time} seconds before retry..."
                sleep $wait_time
                wait_time=$(($wait_time * 2))
              fi
              
              # Use GitHub token for authentication if available
              if [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
                response=$(curl -L -w "%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o "$output_file" "$url")
              else
                response=$(curl -L -w "%{http_code}" -o "$output_file" "$url")
              fi
              
              if [ "$response" = "200" ]; then
                return 0
              elif [ "$response" = "429" ]; then
                echo "Rate limit hit (429). Retrying after delay..."
                retry_count=$(($retry_count + 1))
              else
                echo "Failed with HTTP $response"
                echo "Response content:"
                cat "$output_file" || true
                return 1
              fi
            done
            
            return 1
          }
          
          # Download each file
          for target_file in "${!file_paths[@]}"; do
            source_path="${file_paths[$target_file]}"
            echo "Downloading $target_file from $source_path"
            
            if download_with_retry "$BASE_URL/$source_path" "apipermissions-site/data/$target_file"; then
              echo "Successfully downloaded $target_file"
              
              # Verify file exists and has content
              if [ ! -s "apipermissions-site/data/$target_file" ]; then
                echo "Error: $target_file is empty"
                exit 1
              fi
              
              # Verify JSON is valid and show content summary
              if jq empty "apipermissions-site/data/$target_file" 2>/dev/null; then
                echo "File contents summary for $target_file:"
                jq 'if type == "array" then length else if type == "object" then keys | length else type end end' "apipermissions-site/data/$target_file"
                echo "First few lines of $target_file:"
                head -n 5 "apipermissions-site/data/$target_file"
              else
                echo "Error: Invalid JSON in $target_file"
                exit 1
              fi
              
              echo "Successfully verified $target_file"
            else
              echo "Failed to download $target_file after retries"
              echo "URL: $BASE_URL/$source_path"
              exit 1
            fi
            
            # Add delay between files
            if [ ! -z "${file_paths[$target_file]}" ]; then
              echo "Waiting 5 seconds before next download..."
              sleep 5
            fi
          done
          
          # List all downloaded files with sizes
          echo "Contents of data directory:"
          ls -lh apipermissions-site/data/
          
          # Verify JSON files are readable
          echo "Verifying JSON files are readable:"
          for file in apipermissions-site/data/*.json; do
            echo "Testing $file:"
            head -n 1 "$file"
          done
      
      - name: Process data
        run: |
          echo "Data fetched from Microsoft repositories at $(date)" > apipermissions-site/data/last-update.txt
          
          # Verify all required files exist and have content
          required_files=(
            "permissions-descriptions.json"
            "provisioning-info.json"
            "permissions-beta.json"
            "permissions.json"
          )
          for file in "${required_files[@]}"; do
            if [ ! -f "apipermissions-site/data/$file" ]; then
              echo "Error: Missing required file $file"
              exit 1
            fi
            if [ ! -s "apipermissions-site/data/$file" ]; then
              echo "Error: File $file is empty"
              exit 1
            fi
            echo "File $file exists and has content"
          done
      
      - name: Generate sitemap
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?>' > apipermissions-site/sitemap.xml
          echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' >> apipermissions-site/sitemap.xml
          echo '  <url><loc>https://apipermissions.cengizyilmaz.net/</loc></url>' >> apipermissions-site/sitemap.xml
          echo '  <url><loc>https://apipermissions.cengizyilmaz.net/permissions.html</loc></url>' >> apipermissions-site/sitemap.xml
          echo '  <url><loc>https://apipermissions.cengizyilmaz.net/about.html</loc></url>' >> apipermissions-site/sitemap.xml
          echo '</urlset>' >> apipermissions-site/sitemap.xml
      
      - name: Create robots.txt
        run: |
          echo 'User-agent: *' > apipermissions-site/robots.txt
          echo 'Allow: /' >> apipermissions-site/robots.txt
          echo 'Sitemap: https://apipermissions.cengizyilmaz.net/sitemap.xml' >> apipermissions-site/robots.txt
      
      - name: Setup custom domain
        run: echo 'apipermissions.cengizyilmaz.net' > apipermissions-site/CNAME

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'apipermissions-site'

  deploy:
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 